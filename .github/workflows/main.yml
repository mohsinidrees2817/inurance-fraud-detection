name: Build, Push, and Deploy Noor Project

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/noor-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/noor-frontend

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set image tag
        id: vars
        run: echo "tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./insurance_fraud_detection/backend
          file: ./insurance_fraud_detection/backend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ steps.vars.outputs.tag }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./insurance_fraud_detection/frontend
          file: ./insurance_fraud_detection/frontend/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ steps.vars.outputs.tag }}

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} -p ${{ secrets.GHCR_TOKEN }}

            # Pull updated images
            docker pull ghcr.io/${{ github.repository }}/noor-backend:latest
            docker pull ghcr.io/${{ github.repository }}/noor-frontend:latest

            # Stop and remove old containers if they exist
            docker stop noor-backend || true && docker rm noor-backend || true
            docker stop noor-frontend || true && docker rm noor-frontend || true

            # Run backend container (on port 8000)
            docker run -d --name noor-backend -p 8000:8000 ghcr.io/${{ github.repository }}/noor-backend:latest

            # Run frontend container (on port 8501)
            docker run -d --name noor-frontend -p 8501:8501 ghcr.io/${{ github.repository }}/noor-frontend:latest
          EOF
